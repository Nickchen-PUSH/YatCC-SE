# YatCC-SE 开发环境 Dockerfile
# 兼容现有的 docker-compose.yml 配置

FROM ubuntu:24.04

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# 设置工作目录
WORKDIR /workspace

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    # 基础工具
    curl \
    wget \
    git \
    vim \
    nano \
    tree \
    htop \
    unzip \
    zip \
    jq \
    # Python 开发环境
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    python3-setuptools \
    # Node.js 和 npm (用于前端开发)
    nodejs \
    npm \
    # Redis 服务器
    redis-server \
    # SSH 服务器 (用于远程连接)
    openssh-server \
    # 构建工具
    build-essential \
    make \
    gcc \
    g++ \
    # 网络工具
    net-tools \
    iputils-ping \
    telnet \
    # 系统工具
    sudo \
    ca-certificates \
    gnupg \
    lsb-release \
    software-properties-common \
    # Git 和版本控制
    git-core \
    # 进程管理
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# 安装 Docker (用于容器内开发)
RUN curl -fsSL https://get.docker.com -o get-docker.sh \
    && sh get-docker.sh \
    && rm get-docker.sh \
    && usermod -aG docker root

# 创建开发用户 (与现有配置兼容)
RUN useradd -m -s /bin/bash -G sudo,docker developer \
    && echo 'developer:developer' | chpasswd \
    && echo 'developer ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# 创建 minikube 目录
RUN mkdir -p /home/developer/.minikube \
    && chown -R developer:developer /home/developer

# 安装 Python 包管理工具
RUN pip3 install --upgrade pip setuptools wheel

# 安装项目 Python 依赖
RUN pip3 install \
    # Web 框架
    'flask[async]' \
    gunicorn \
    # 数据库和缓存
    redis \
    # 加密和安全
    cryptography \
    # HTTP 客户端
    httpx \
    requests \
    # API 文档
    'flask-openapi3[swagger, rapipdf, rapidoc]' \
    # Kubernetes 客户端
    kubernetes \
    # 开发工具
    pytest \
    pytest-asyncio \
    pytest-cov \
    black \
    flake8 \
    mypy \
    # 调试工具
    ipdb \
    pdb++ \
    # 监控工具
    psutil \
    # 日志工具
    loguru

# 配置 Redis
RUN mkdir -p /var/log/redis /var/lib/redis \
    && chown redis:redis /var/log/redis /var/lib/redis

# 配置 SSH
RUN mkdir /var/run/sshd \
    && echo 'root:root' | chpasswd \
    && sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config \
    && sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config

# 安装 code-server (VS Code in browser)
RUN curl -fsSL https://code-server.dev/install.sh | sh

# 创建 Supervisor 配置目录
RUN mkdir -p /etc/supervisor/conf.d

# 配置 Supervisor
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# 复制项目文件 (注释掉，因为通过 volume 挂载)
# COPY . /workspace/
# RUN chown -R developer:developer /workspace

# 切换到开发用户
USER developer
WORKDIR /workspace

# 安装前端依赖 (运行时安装，因为代码通过 volume 挂载)
# RUN if [ -f "stu-site/package.json" ]; then \
#         cd stu-site && \
#         npm install && \
#         cd ..; \
#     fi

# 创建开发环境配置模板
RUN echo '#!/bin/bash\n\
# 检查并安装前端依赖\n\
if [ -f "/workspace/stu-site/package.json" ] && [ ! -d "/workspace/stu-site/node_modules" ]; then\n\
    echo "安装前端依赖..."\n\
    cd /workspace/stu-site && npm install\n\
fi\n\
\n\
# 创建开发配置文件（如果不存在）\n\
if [ ! -f "/workspace/config.py" ]; then\n\
    echo "创建开发配置文件..."\n\
    cat > /workspace/config.py << EOF\n\
# 开发环境配置\n\
DEBUG = True\n\
REDIS_HOST = "redis"\n\
REDIS_PORT = 6379\n\
SECRET_KEY = "dev-secret-key-change-in-production"\n\
EOF\n\
fi\n\
\n\
exec "$@"' > /entrypoint.sh && chmod +x /entrypoint.sh

# 切换回 root 用户启动服务
USER root

# 暴露端口 (与现有 docker-compose.yml 兼容)
EXPOSE 22 5000 5001 5002 6379 8080 8443

# 设置数据卷
VOLUME ["/workspace", "/var/lib/redis", "/home/developer/.minikube"]

# 入口点
ENTRYPOINT ["/entrypoint.sh"]
CMD ["/bin/bash"]
